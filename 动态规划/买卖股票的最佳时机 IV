// 版本一 优化前
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        vector<vector<vector<int>>> dp(prices.size(), vector<vector<int>>(k+1, vector<int>(2)));
        for(int j=1;j<=k;j++){
            dp[0][j][0]=-prices[0];
        }
        for(int i=1;i<prices.size();i++){
            for(int j=1;j<=k;j++){
                dp[i][j][0]=max(dp[i-1][j-1][1]-prices[i], dp[i-1][j][0]);
                dp[i][j][1]=max(dp[i-1][j][0]+prices[i], dp[i-1][j][1]);
            }
        }
        return dp[prices.size()-1][k][1];
    }
};
// 版本二 优化后
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {

        if (prices.size() == 0) return 0;
        vector<vector<int>> dp(prices.size(), vector<int>(2 * k + 1, 0));
        for (int j = 1; j < 2 * k; j += 2) {
            dp[0][j] = -prices[0];
        }
        for (int i = 1;i < prices.size(); i++) {
            for (int j = 0; j < 2 * k - 1; j += 2) {
                dp[i][j + 1] = max(dp[i - 1][j + 1], dp[i - 1][j] - prices[i]);
                dp[i][j + 2] = max(dp[i - 1][j + 2], dp[i - 1][j + 1] + prices[i]);
            }
        }
        return dp[prices.size() - 1][2 * k];
    }
};
