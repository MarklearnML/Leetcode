class Solution {
public:
    bool canJump(vector<int>& nums) {  //  动态规划 注意是最大长度 而不是固定长度
        int n=nums.size();
        return dp(n-1, nums);
    }
    int dp(int i, vector<int> nums){
        int num=0, total=0,k=0;
        if(nums[i]==0&&i<nums.size()-1) return 0;
        if(i==0) return 1;
        for(int j=0;j<i;j++){
            if(total<j){
                k=j;
                total=k+nums[k];
            }
            total=max(total,j+nums[j]);
            if(total>=i&&nums[j]!=0){       // 注意如果是固定长度就是==  最大长度就是>=
                return dp(k, nums);
            }
        }
        return num;
    }
};
