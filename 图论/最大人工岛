class Solution {
public:
    int count=0;
    int index=1;
    void dfs(vector<vector<int>>& grid, vector<vector<bool>>& used, int i, int j){
        count+=1;
        grid[i][j]=index;
        used[i][j]=true;
        if(i>0&&grid[i-1][j]==1&&used[i-1][j]==false) dfs(grid, used, i-1, j);
        if(i<grid.size()-1&&grid[i+1][j]==1&&used[i+1][j]==false) dfs(grid, used, i+1, j);
        if(j>0&&grid[i][j-1]==1&&used[i][j-1]==false) dfs(grid, used, i, j-1);
        if(j<grid[0].size()-1&&grid[i][j+1]==1&&used[i][j+1]==false) dfs(grid, used, i, j+1);
    }
    int largestIsland(vector<vector<int>>& grid) {
        vector<vector<bool>> used(grid.size(), vector<bool>(grid[0].size(), false));
        unordered_map<int,int> hash;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(used[i][j]==false&&grid[i][j]==1){
                    count=0;
                    dfs(grid, used, i, j);
                    if(count==grid.size()*grid.size()) return count;
                    hash[index]=count;
                    index++;
                }
            }
        }
        int result=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(used[i][j]==false&&grid[i][j]==0){
                    unordered_set<int> ans;
                    int haha=1;
                    if(i>0&&grid[i-1][j]!=0) ans.insert(grid[i-1][j]);
                    if(j>0&&grid[i][j-1]!=0) ans.insert(grid[i][j-1]);
                    if(i<grid.size()-1&&grid[i+1][j]!=0) ans.insert(grid[i+1][j]);
                    if(j<grid[0].size()-1&&grid[i][j+1]!=0) ans.insert(grid[i][j+1]);
                    for(int k:ans){
                        haha+=hash[k];
                    }
                    result=max(result, haha);
                }
            }
        }
        return result;
    }
};
