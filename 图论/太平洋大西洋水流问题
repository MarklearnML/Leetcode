class Solution {
public:
    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& used, int i, int j){
        used[i][j]=true;
        if(i>0&&heights[i-1][j]>=heights[i][j]&&used[i-1][j]==false) dfs(heights, used, i-1, j);
        if(i<heights.size()-1&&heights[i+1][j]>=heights[i][j]&&used[i+1][j]==false) dfs(heights, used, i+1, j);
        if(j>0&&heights[i][j-1]>=heights[i][j]&&used[i][j-1]==false) dfs(heights, used, i, j-1);
        if(j<heights[0].size()-1&&heights[i][j+1]>=heights[i][j]&&used[i][j+1]==false) dfs(heights, used, i, j+1);
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        vector<vector<bool>> used1(heights.size(), vector<bool>(heights[0].size(), false));
        vector<vector<bool>> used2(heights.size(), vector<bool>(heights[0].size(), false));
        vector<vector<int>> result;
        for(int i=0;i<heights.size();i++){
            if(used1[i][0]==false) dfs(heights, used1, i, 0);
            if(used2[i][heights[0].size()-1]==false) dfs(heights, used2, i, heights[0].size()-1);
        }
        for(int i=0;i<heights[0].size();i++){
            if(used1[0][i]==false) dfs(heights, used1, 0, i);
            if(used2[heights.size()-1][i]==false) dfs(heights, used2, heights.size()-1, i);
        }
        for(int i=0;i<heights.size();i++){
            for(int j=0;j<heights[0].size();j++){
                if(used1[i][j]==true&&used2[i][j]==true) result.push_back({i, j});
            }
        }
        return result;
    }
};
